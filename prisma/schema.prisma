// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int            @id @default(autoincrement())
  name             String
  email            String         @unique
  username         String         @unique
  password         String
  teacher          Teacher?
  student          Student?
  announcements    Announcement[]
  sentMessages     Message[]      @relation(name: "sender")
  receivedMessages Message[]      @relation(name: "receiver")
}

model Teacher {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique
  description String    @db.Text
  user        User      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  lectures    Lecture[]
}

model Student {
  id     Int     @id @default(autoincrement())
  userId Int     @unique
  user   User    @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  crOf   Class?  @relation(name: "cr")
  vcrOf  Class?  @relation(name: "vcr")
  enroll Enroll?
}

model Class {
  id            Int            @id @default(autoincrement())
  name          String
  description   String         @db.Text
  crId          Int            @unique
  vcrId         Int?           @unique
  cr            Student        @relation(name: "cr", fields: [crId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  vcr           Student?       @relation(name: "vcr", fields: [vcrId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  enrolls       Enroll[]
  lectures      Lecture[]
  announcements Announcement[]
  messages      Message[]
}

model Enroll {
  id         Int       @id @default(autoincrement())
  status     String
  approvedAt DateTime?
  classId    Int
  studentId  Int       @unique
  class      Class     @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  student    Student   @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Lecture {
  id        Int     @id @default(autoincrement())
  subject   String
  classId   Int
  teacherId Int
  class     Class   @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Announcement {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  image      String?   @db.Text
  createdAt DateTime @default(now())
  userId    Int
  classId   Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String   @db.Text
  image      String?   @db.Text
  createdAt  DateTime @default(now())
  senderId   Int
  receiverId Int?
  classId    Int
  sender     User     @relation(name: "sender", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  receiver   User?     @relation(name: "receiver", fields: [receiverId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  class      Class    @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
